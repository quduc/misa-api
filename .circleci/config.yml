version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  slack: circleci/slack@4.4.2

jobs:
  execute-test:
    docker:
      - image: circleci/php:8.0-fpm-node-browsers
      - image: circleci/mysql:8.0
        environment:
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: password
        # 認証方式をLaravelが対応しているパスワード認証に変更
        command: [ --default_authentication_plugin=mysql_native_password ]
    steps:
      - checkout
      - run: sudo apt update
      - run:
          command: >-
              sudo apt-get install -y
              git
              iputils-ping
              net-tools
              zlib1g-dev
              unzip
              libzip-dev
              libfreetype6-dev
              libpng-dev
              libjpeg-dev
      - run: |
          sudo docker-php-ext-install zip pdo_mysql bcmath
          sudo docker-php-ext-configure gd --with-freetype --with-jpeg
          sudo docker-php-ext-install -j$(nproc) gd
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "./composer.json" }}
            - v1-dependencies-
      - run:
          name: "composer のバージョンをDockerfileで指定されたものに変更"
          command: sudo composer self-update 2.1.3
      - run:
          command: composer install -n --prefer-dist
      - save_cache:
          key: v1-dependencies-{{ checksum "./composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "./package.json" }}
            - node-v1-
      - run:
          command: npm install
      - save_cache:
          key: node-v1-{{ checksum "./package.json" }}
          paths:
            - ./node_modules
      - run:
          name: "dockerizeのインストール"
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: "DBの起動を待つ"
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: "テスト用の.envを用意"
          command: mv .env.testing .env
      - run:
          name: "Circle CI上のコンテナからMySQLに接続できるようにする"
          command: sed -i -e s/DB_HOST=mysql/DB_HOST=127.0.0.1/ .env
      - run:
          name: "アプリケーションkeyを生成"
          command: php artisan key:generate --ansi
      - run:
          name: "マイグレーション実行"
          command: php artisan migrate
      - run:
          name: "テスト実行"
          command: |
            mkdir -p ./phpunit
            ./vendor/bin/phpunit --log-junit ./phpunit/junit.xml tests
      - store_test_results:
          path: ./phpunit
      - store_artifacts:
          path: ./phpunit
      - run:
          name: "シーディング可能か確認"
          command: php artisan migrate:fresh --seed
      - run:
          name: "リバースマイグレーション可能か確認"
          command: php artisan migrate:rollback
      - slack/notify:
          channel: "pj-keihan-crm-develop-notification"
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": ":white_check_mark: [STG] ビルドに成功しました",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
      - slack/notify:
          channel: "pj-keihan-crm-develop-notification"
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": ":x: [STG] ビルドに失敗しました。修正をお願いします。",
                      "emoji": true
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
workflows:
  version: 2
  build:
    jobs:
      - execute-test:
          filters:
            branches:
              only: main